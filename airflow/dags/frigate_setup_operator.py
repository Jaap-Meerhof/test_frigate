# -*- coding: utf-8 -*-
"""
"""

import os
import random
import igraph as ig
import jinja2
import logging
from lxml import etree as etree
from airflow.models.baseoperator import BaseOperator
from airflow.utils.decorators import apply_defaults
from sumo_util import generate_traffic_rnd, generate_traffic_sp, get_plainxml_net

#logger = logging.getLogger(__name__)
logger = logging.getLogger("airflow.task")


SUMO_CFG_TEMPLATE = """
<!-- Automatically generated by AGR -->
<configuration>

    <input>
        <net-file value="{{sumo_net_filen}}"/>
        <route-files value="{{routes_filen}}"/>
    </input>

    <time>
        <begin value="{{sim_begin}}"/>
        <end value="{{sim_end}}"/>
        <step-length value="{{sim_step_length}}"/>
    </time>

</configuration>
"""


class TRAFFIC_TYPE:
    random = 0
    shortest_path = 1


class FrigateSetupOperator(BaseOperator):

    @apply_defaults
    def __init__(
            self,
            name: str,
            graphml_roadnet_file: str,
            sim_folder: str,
            num_vehicles: int,
            source_nodes: list,
            target_node: int,
            traffic_type: int,
            depart_step: int,
            sim_begin: float,
            sim_end: float,
            sim_step_length: float,
            vehicle_id_suffix: str,
            simulator_id: int,
            *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)
        self.name = name
        self.graphml_roadnet_file = graphml_roadnet_file
        # relative or full path of the new sim folder is needed here
        self.sim_folder = sim_folder
        self.num_vehicles = num_vehicles
        self.source_nodes = source_nodes
        self.target_node = target_node
        self.traffic_type = traffic_type
        self.depart_step = depart_step
        self.sim_begin = sim_begin
        self.sim_end = sim_end
        self.sim_step_length = sim_step_length
        self.vehicle_id_suffix = vehicle_id_suffix
        self.simulator_id = simulator_id

    def _generate_traffic(self, g) -> None:

        routes_xml_file = f"{self.sim_folder}/{self.simulator_id}/{self.target_node}/routes.rou.xml"

        if self.traffic_type == TRAFFIC_TYPE.random:
            generate_traffic_rnd(g=g,
                                 num_vehicles=self.num_vehicles,
                                 sources=self.source_nodes,
                                 targets=[target_node],
                                 routes_xml_filen=routes_xml_file,
                                 depart_step=self.depart_step,
                                 vehicle_id_suffix=self.vehicle_id_suffix)
        elif self.traffic_type == TRAFFIC_TYPE.shortest_path:
            generate_traffic_sp(g=g,
                                num_vehicles=self.num_vehicles,
                                sources=self.source_nodes,
                                targets=[self.target_node],
                                routes_xml_filen=routes_xml_file,
                                depart_step=self.depart_step,
                                vehicle_id_suffix=self.vehicle_id_suffix)
        else:
            raise Exception(
                f"Unkown specified traffic type: {self.traffic_type}")
        return

    def _generate_sumo_roadnet(self, g) -> None:

        get_plainxml_net(g=g,
                         nod_xml_filen=f"{self.sim_folder}/{self.simulator_id}/{self.target_node}/nodes.nod.xml",
                         edg_xml_filen=f"{self.sim_folder}/{self.simulator_id}/{self.target_node}/edges.edg.xml",
                         net_xml_filen=f"{self.sim_folder}/{self.simulator_id}/{self.target_node}/roadnet.net.xml")
        return

    def _generate_sumo_cfg(self) -> None:

        render = jinja2.Template(SUMO_CFG_TEMPLATE).render(
            sumo_net_filen="roadnet.net.xml",
            routes_filen="routes.rou.xml",
            sim_begin=self.sim_begin,
            sim_end=self.sim_end,
            sim_step_length=self.sim_step_length
        )
        sumo_cfg_file = f"{self.sim_folder}/{self.simulator_id}/{self.target_node}/simulation.sumocfg"
        fp = open(sumo_cfg_file, "w+")
        fp.write(render)
        fp.close()

    def execute(self, context):

        logger.info(f"Hello from FrigateSumoSetupOperator")

        logger.info(f"loading graph {self.graphml_roadnet_file}")
        g = ig.Graph.Read_GraphML(self.graphml_roadnet_file)
        logger.info(f"loaded graph: {g.summary()}")

        logger.info(
            f"preparing sim data for target node {self.target_node} ...")

        logger.info(f"creating sim folder {self.sim_folder}")

        if not os.path.exists(self.sim_folder):
            os.mkdir(self.sim_folder)
        os.mkdir(f"{self.sim_folder}/{self.simulator_id}")        
        os.mkdir(f"{self.sim_folder}/{self.simulator_id}/{self.target_node}")

        logger.info(f"generating traffic of type {self.traffic_type}")
        self._generate_traffic(g=g)

        logger.info(f"generating SUMO NET XML file ...")
        # TODO: add code to confirm the NET file conforms to the GraphML file
        self._generate_sumo_roadnet(g=g)

        logger.info(f"generating simulation cfg file ...")
        self._generate_sumo_cfg()

        logger.info(f"Done.")

        return f"Done {self.name}."
